@page
@model ResumeModel
@{
    ViewData["Title"] = @Html.DisplayFor(model => model.Data.User.Name);
}

<div id="canBeZoomed" class="resume-content" style="transform: scale(1); cursor: zoom-in;">
    <div class="resume-container">
        <div class="header">
            <div id="main-header">
                <hr class="bottom" style="border-width: 0.166667rem;">
                <div class="header-container">
                    <div class="left">
                        <img alt="Profile" class="avatar" src="img/avatar.png">
                    </div>
                    <div class="right">
                        <h1>@Html.DisplayFor(model => model.Data.User.Name)</h1>
                        <span>software engineer</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="sidebar">
            <hr class="right" style="border-width: 0.0833333rem;">
            <div class="underlined">
                <h1 level="1">Contact</h1>
            </div>
            <p>
                <strong>Phone:</strong>
                <br />
                @Html.DisplayFor(model => model.Data.User.Phone)
                <br />
                <strong>Email:</strong>
                <br />
                @Html.DisplayFor(model => model.Data.User.Email)
                <br />
                <br />
                <strong>LinkedIn:</strong>
                @Html.Raw(Model.Data.User.Linked)
            </p>
            <div class="underlined">
                <h1 level="1">Tech Exp</h1>
            </div>
            <ul>
                @foreach (var exp in Model.Data.User.Exp)
                {
                    <li>@exp</li>
                }
            </ul>
            <div class="underlined">
                <h3 level="3">Some experience in</h3>
            </div>
            <p>
                @Html.DisplayFor(model => model.SomeExpString)
            </p>
            <div class="underlined">
                <h1 level="1">Other skills</h1>
            </div>
            <ul>
                @foreach (var other in Model.Data.User.Other)
                {
                    <li>@other</li>
                }
            </ul>
            <div class="underlined">
                <h1 level="1">Education</h1>
            </div>
            <ul>
                @foreach (var education in Model.Data.User.Education)
                {
                    <li>@education.Name (@education.DateFrom.Year - @education.DateTo.Year): @education.Degree in @education.Field</li>
                }
            </ul>
            <div class="underlined">
                <h1 level="1">Languages</h1>
            </div>
            <ul>
                @foreach (var lang in Model.Data.User.Languages)
                {
                    <li>@lang</li>
                }
            </ul>
        </div>

        <div class="main">
            <div class="underlined">
                <h1 level="1">Profile</h1>
            </div>
            <p>@Html.Raw(Model.Data.User.Profile)</p>

            <div class="underlined">
                <h1 level="1">Relevant Work Experience</h1>
            </div>
            @foreach (var exp in Model.Data.User.WorkExperiences)
            {
                <div class="underlined">
                    <h3 level="3">@exp.Name (@exp.ExpYears)</h3>
                </div>
                <ul>
                    @foreach (var stack in exp.Stack)
                    {
                        <li>@stack.Name: @stack.Position</li>
                    }
                </ul>
            }

            <div class="underlined">
                <h1 level="1">About me</h1>
            </div>
            <p>@Html.Raw(Model.Data.User.About)</p>
            <br />
            <p>I hereby give consent for my personal data to be processed by @Request.Query["company"] for the purpose of conducting recruitment for the position for which I am applying.</p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var isZoomed = false;

        document.getElementById('canBeZoomed').addEventListener('click', function () {
            if (!isZoomed) {
                this.style.transform = "scale(1.6)";
                this.style.cursor = "zoom-out";
                this.style.isZoomed = true;
                isZoomed = true;
            } else {
                this.style.transform = "scale(1)";
                this.style.cursor = "zoom-in";
                this.style.isZoomed = false;
                isZoomed = false;
            }
        });
    </script>
}